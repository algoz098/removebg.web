// Sistema de navega√ß√£o inteligente para PWA
// Mant√©m cache entre p√°ginas e evita recarregamento desnecess√°rio

import { globalState } from './global-state.js';

class NavigationManager {
  constructor() {
    this.setupNavigationInterception();
    this.setupPageLoadOptimization();
    
    console.log('üö™ NavigationManager inicializado');
  }

  /**
   * Intercepta navega√ß√£o entre p√°ginas para otimizar
   */
  setupNavigationInterception() {
    // Interceptar cliques nos links de navega√ß√£o
    document.addEventListener('click', (e) => {
      const link = e.target.closest('a');
      if (link && this.shouldOptimizeNavigation(link)) {
        this.optimizeNavigation(e, link);
      }
    });

    // Interceptar mudan√ßas no hist√≥rico
    window.addEventListener('popstate', (e) => {
      this.handleHistoryNavigation(e);
    });
  }

  /**
   * Configurar otimiza√ß√µes de carregamento de p√°gina
   */
  setupPageLoadOptimization() {
    // Verificar se √© retorno para p√°gina de in√≠cio
    const currentPath = window.location.pathname;
    const referrer = document.referrer;
    
    if (currentPath === '/' && referrer.includes('sobre.html')) {
      console.log('üîÑ Detectada navega√ß√£o de volta √† p√°gina inicial');
      this.optimizeReturnToHome();
    }

    // Atualizar estado global com p√°gina atual
    globalState.updateCurrentPage(currentPath);
  }

  /**
   * Verificar se deve otimizar navega√ß√£o para este link
   */
  shouldOptimizeNavigation(link) {
    const href = link.getAttribute('href');
    
    // Apenas links internos
    if (!href || href.startsWith('http') || href.startsWith('//')) {
      return false;
    }

    // Links para p√°ginas principais
    const optimizablePages = ['/', '/sobre.html', 'sobre.html'];
    return optimizablePages.includes(href);
  }

  /**
   * Otimizar navega√ß√£o interceptada
   */
  optimizeNavigation(event, link) {
    const href = link.getAttribute('href');
    
    // Se est√° indo para home e app j√° foi inicializado, marcar para pular splash
    if (href === '/' && globalState.isSplashCompleted()) {
      console.log('‚ö° Navega√ß√£o para home com splash j√° completado');
      
      // Garantir que n√£o vai mostrar splash novamente
      sessionStorage.setItem('skipSplash', 'true');
      sessionStorage.setItem('skipSplashReason', 'navigation-return');
      sessionStorage.setItem('skipSplashTimestamp', Date.now().toString());
    }
    
    // Se est√° indo para home e cache est√° pronto, preparar para carregamento r√°pido
    if (href === '/' && globalState.isCacheReady()) {
      console.log('‚ö° Cache pronto, navega√ß√£o otimizada para home');
      
      // Salvar flag para carregamento r√°pido
      sessionStorage.setItem('fastLoad', 'true');
      sessionStorage.setItem('fastLoadReason', 'cache-ready');
    }

    // Permitir navega√ß√£o normal
    return true;
  }

  /**
   * Otimizar retorno √† p√°gina inicial
   */
  optimizeReturnToHome() {
    const stats = globalState.getStats();
    
    if (globalState.isCacheReady()) {
      console.log('‚úÖ Cache dispon√≠vel para carregamento r√°pido:', stats);
      
      // Sinalizar para splash manager pular inicializa√ß√£o pesada
      sessionStorage.setItem('fastLoad', 'true');
      sessionStorage.setItem('fastLoadSource', 'navigation-return');
      
      // Mostrar indicador visual de carregamento r√°pido
      this.showFastLoadIndicator();
    }
  }

  /**
   * Lidar com navega√ß√£o via hist√≥rico (bot√£o voltar/avan√ßar)
   */
  handleHistoryNavigation(event) {
    console.log('üîô Navega√ß√£o via hist√≥rico detectada:', event.state);
    
    // Se voltando para home com cache pronto
    if (window.location.pathname === '/' && globalState.isCacheReady()) {
      sessionStorage.setItem('fastLoad', 'true');
      sessionStorage.setItem('fastLoadSource', 'history-back');
    }
  }

  /**
   * Mostrar indicador de carregamento r√°pido
   */
  showFastLoadIndicator() {
    // Criar indicador discreto
    const indicator = document.createElement('div');
    indicator.id = 'fast-load-indicator';
    indicator.innerHTML = '‚ö° Carregamento otimizado';
    indicator.style.cssText = `
      position: fixed;
      top: 10px;
      right: 10px;
      background: #28a745;
      color: white;
      padding: 8px 12px;
      border-radius: 20px;
      font-size: 14px;
      z-index: 10000;
      opacity: 0;
      transition: opacity 0.3s;
    `;
    
    document.body.appendChild(indicator);
    
    // Animar entrada
    setTimeout(() => {
      indicator.style.opacity = '1';
    }, 100);
    
    // Remover ap√≥s tempo
    setTimeout(() => {
      indicator.style.opacity = '0';
      setTimeout(() => {
        if (indicator.parentNode) {
          indicator.parentNode.removeChild(indicator);
        }
      }, 300);
    }, 2000);
  }

  /**
   * Verificar se deve usar carregamento r√°pido
   */
  static shouldUseFastLoad() {
    const fastLoad = sessionStorage.getItem('fastLoad');
    const reason = sessionStorage.getItem('fastLoadReason') || 
                  sessionStorage.getItem('fastLoadSource');
    
    if (fastLoad === 'true') {
      console.log('‚ö° Fast load ativado:', reason);
      
      // Limpar flags para pr√≥xima navega√ß√£o
      sessionStorage.removeItem('fastLoad');
      sessionStorage.removeItem('fastLoadReason');
      sessionStorage.removeItem('fastLoadSource');
      
      return true;
    }
    
    return false;
  }

  /**
   * Pr√©-carregar recursos da pr√≥xima p√°gina
   */
  preloadNextPage(href) {
    // Apenas se cache estiver pronto e connection for boa
    if (!globalState.isCacheReady() || !navigator.connection) {
      return;
    }

    // Verificar tipo de conex√£o
    const connection = navigator.connection;
    if (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {
      return; // N√£o pr√©-carregar em conex√µes lentas
    }

    console.log('üöÄ Pr√©-carregando recursos para:', href);
    
    // Criar link prefetch
    const prefetch = document.createElement('link');
    prefetch.rel = 'prefetch';
    prefetch.href = href;
    document.head.appendChild(prefetch);
  }
}

// Instanciar apenas uma vez
let navigationManager = null;

// Inicializar quando DOM estiver pronto
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    if (!navigationManager) {
      navigationManager = new NavigationManager();
    }
  });
} else {
  // DOM j√° est√° pronto
  if (!navigationManager) {
    navigationManager = new NavigationManager();
  }
}

// Exportar para uso em outros m√≥dulos
export { NavigationManager, navigationManager };

// Disponibilizar globalmente
window.navigationManager = navigationManager;

/**
 * Comandos personalizados para testes E2E
 * Facilita a execu√ß√£o de tarefas comuns
 */

import { execSync } from 'child_process';
import path from 'path';

class TestCommands {
  
  /**
   * Instala depend√™ncias e navegadores do Playwright
   */
  static install() {
    console.log('üîß Instalando depend√™ncias do Playwright...');
    execSync('npm install', { stdio: 'inherit' });
    execSync('npx playwright install', { stdio: 'inherit' });
    console.log('‚úÖ Instala√ß√£o conclu√≠da!');
  }

  /**
   * Executa todos os testes
   */
  static runAll() {
    console.log('üß™ Executando todos os testes E2E...');
    execSync('npx playwright test', { stdio: 'inherit' });
  }

  /**
   * Executa testes em modo UI
   */
  static runUI() {
    console.log('üé≠ Abrindo interface de testes...');
    execSync('npx playwright test --ui', { stdio: 'inherit' });
  }

  /**
   * Executa testes em modo debug
   */
  static debug() {
    console.log('üêõ Executando testes em modo debug...');
    execSync('npx playwright test --debug', { stdio: 'inherit' });
  }

  /**
   * Executa testes com visualiza√ß√£o (headed)
   */
  static headed() {
    console.log('üëÄ Executando testes com navegador vis√≠vel...');
    execSync('npx playwright test --headed', { stdio: 'inherit' });
  }

  /**
   * Executa testes de um arquivo espec√≠fico
   */
  static runFile(fileName) {
    console.log(`üéØ Executando testes do arquivo: ${fileName}`);
    execSync(`npx playwright test ${fileName}`, { stdio: 'inherit' });
  }

  /**
   * Executa testes de uma su√≠te espec√≠fica
   */
  static runSuite(suiteName) {
    console.log(`üìã Executando su√≠te: ${suiteName}`);
    execSync(`npx playwright test --grep "${suiteName}"`, { stdio: 'inherit' });
  }

  /**
   * Executa testes em um navegador espec√≠fico
   */
  static runBrowser(browser) {
    console.log(`üåê Executando testes no navegador: ${browser}`);
    execSync(`npx playwright test --project=${browser}`, { stdio: 'inherit' });
  }

  /**
   * Gera relat√≥rio HTML
   */
  static report() {
    console.log('üìä Abrindo relat√≥rio de testes...');
    execSync('npx playwright show-report', { stdio: 'inherit' });
  }

  /**
   * Limpa resultados de testes anteriores
   */
  static clean() {
    console.log('üßπ Limpando resultados anteriores...');
    execSync('rm -rf test-results playwright-report', { stdio: 'inherit' });
    console.log('‚úÖ Limpeza conclu√≠da!');
  }

  /**
   * Executa testes em modo CI
   */
  static ci() {
    console.log('üöÄ Executando testes em modo CI...');
    this.clean();
    execSync('NODE_ENV=ci npx playwright test --reporter=junit', { stdio: 'inherit' });
  }

  /**
   * Atualiza screenshots de refer√™ncia
   */
  static updateScreenshots() {
    console.log('üì∏ Atualizando screenshots de refer√™ncia...');
    execSync('npx playwright test --update-snapshots', { stdio: 'inherit' });
  }

  /**
   * Verifica se o projeto est√° pronto para testes
   */
  static check() {
    console.log('üîç Verificando configura√ß√£o...');
    
    const checks = [
      { name: 'Playwright instalado', command: 'npx playwright --version' },
      { name: 'Navegadores instalados', command: 'npx playwright install --dry-run' },
      { name: 'Configura√ß√£o v√°lida', command: 'npx playwright test --list' }
    ];

    for (const check of checks) {
      try {
        execSync(check.command, { stdio: 'pipe' });
        console.log(`‚úÖ ${check.name}`);
      } catch (error) {
        console.log(`‚ùå ${check.name}`);
        console.log(`   Erro: ${error.message}`);
      }
    }
  }

  /**
   * Mostra ajuda com comandos dispon√≠veis
   */
  static help() {
    console.log(`
üé≠ Comandos de Teste E2E RemoveBG

Instala√ß√£o:
  npm run test:install        - Instala Playwright e depend√™ncias
  
Execu√ß√£o:
  npm run test:e2e           - Executa todos os testes
  npm run test:e2e:ui        - Interface visual de testes
  npm run test:e2e:debug     - Modo debug
  npm run test:e2e:headed    - Com navegador vis√≠vel
  
Comandos personalizados:
  node tests/commands.js install      - Instala√ß√£o completa
  node tests/commands.js run-all      - Todos os testes
  node tests/commands.js ui           - Interface visual
  node tests/commands.js debug        - Modo debug
  node tests/commands.js headed       - Navegador vis√≠vel
  node tests/commands.js file <nome>  - Arquivo espec√≠fico
  node tests/commands.js suite <nome> - Su√≠te espec√≠fica
  node tests/commands.js browser <br> - Navegador espec√≠fico
  node tests/commands.js report       - Abrir relat√≥rio
  node tests/commands.js clean        - Limpar resultados
  node tests/commands.js ci           - Modo CI/CD
  node tests/commands.js update-ss    - Atualizar screenshots
  node tests/commands.js check        - Verificar configura√ß√£o
  node tests/commands.js help         - Esta ajuda

Exemplos:
  node tests/commands.js file upload.spec.js
  node tests/commands.js suite "Upload e Processamento"
  node tests/commands.js browser chromium
    `);
  }
}

// CLI para execu√ß√£o direta
if (process.argv[1] === import.meta.url.replace('file://', '')) {
  const command = process.argv[2];
  const arg = process.argv[3];

  switch (command) {
    case 'install':
      TestCommands.install();
      break;
    case 'run-all':
      TestCommands.runAll();
      break;
    case 'ui':
      TestCommands.runUI();
      break;
    case 'debug':
      TestCommands.debug();
      break;
    case 'headed':
      TestCommands.headed();
      break;
    case 'file':
      TestCommands.runFile(arg);
      break;
    case 'suite':
      TestCommands.runSuite(arg);
      break;
    case 'browser':
      TestCommands.runBrowser(arg);
      break;
    case 'report':
      TestCommands.report();
      break;
    case 'clean':
      TestCommands.clean();
      break;
    case 'ci':
      TestCommands.ci();
      break;
    case 'update-ss':
      TestCommands.updateScreenshots();
      break;
    case 'check':
      TestCommands.check();
      break;
    case 'help':
    default:
      TestCommands.help();
      break;
  }
}

export default TestCommands;
